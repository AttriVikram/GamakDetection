/*
list
#########
This program takes in the '..gmkList' files generated by MATLAB.
It will break the entire time of the audio into 1s intervals and mark those that fall in the gamak times.
It will also return a list of the final time.

#########
*/
#include <fstream>
#include <iostream>
#include <math.h>
#include <cstring>
#include <vector>

double insigGamakTimeGap=0; 

using namespace std;

class gmkListParse
{
  public:

	//vector < pair<int,int> > v;
	vector< pair<int,double> > v;
	vector< pair<int,int> > label;
	string inputFileName;
	//int interval;

	gmkListParse(string inpNm)
	{
		//interval = 1;
		inputFileName = inpNm;

		//v = vector< pair<int,int> > (2000);
		v = vector< pair<int,double> > (700);
		label = vector<pair<int,int> >(700);

		for(int i = 0; i<v.size(); i++)
		{	v.at(i).first = i;	
			v.at(i).second = 0.0;
			//v.at(i).second=0;		
			label.at(i).first = i;
			label.at(i).second = 0;	
		}
	}
	/*void handleRecords(pair<double,double> gamakTimeInterval)
	{
		int start = floor(gamakTimeInterval.first);
		int end = floor(gamakTimeInterval.second);

		for(int i = start; i<=end	;i++)
			v.at(i).second = 1; 
	}*/

	void assignGamakTime(pair<double,double> gamakTimeInterval) 
	//divides the start and end time of a record into the intervals in which they go
	{
		int start =  floor(gamakTimeInterval.first);
		int end = floor(gamakTimeInterval.second);

		if(start == end)
			v.at(start).second += gamakTimeInterval.second - gamakTimeInterval.first;
		else
			{
				v.at(start).second += start+1 - gamakTimeInterval.first;
				v.at(end).second += gamakTimeInterval.second - end;

				for(int i = start+1 ; i<= end-1 ; i++)
				{
					v.at(i).second += 1.0 ; //basically the entire interval
				}
			}
	}

	void labelGamakOrNot()
	//labels the entire vector 1 or 0
	{
		for(int i = 0 ; i < v.size() ; i++)
		{
			if(v.at(i).second > insigGamakTimeGap)
				label.at(i).second = 1;
		}
	}

	void dumpLabelVector()
	{
		string outputFileName;

			if(inputFileName.find("List") != string::npos)
			{
				 outputFileName.append( inputFileName.substr( 0,inputFileName.find("List")));
		 		 outputFileName.append("VectorLabelDump"); 
			}
			else
				cout<<"Wrong File name \n";		
		
		ofstream ofs(outputFileName);

		for(int i = 0 ;i<label.size();i++)
			{ ofs<<label[i].second<<endl; }

		ofs.close();
	}

	void readFromLabelFile()
	{
		ifstream ifs(inputFileName.c_str(),ifstream::in);
		cout<<"\nReading from "<<inputFileName<<endl;

		string begTime,endTime;

		int startTm,finishTm;
		
		char status;

		while(!ifs.eof())
		{
			ifs >>begTime >>endTime >>status;

			int index=0;
			index = begTime.find(":");
			startTm = atoi(begTime.substr(0,index).c_str()) * 60 + atoi(begTime.substr(index+1).c_str());
			
			index = endTime.find(":");
			finishTm = atoi(endTime.substr(0,index).c_str()) * 60 + atoi(endTime.substr(index+1).c_str());


			int start = floor(startTm);
			int end = floor(finishTm);

			int i=0;
			for(i = start; i<end	;i++)
				label.at(i).second = 1; 
			
			label.at(i).second = -1;  //-1 signifies it could be taken as either gamak or non gamak
		}
	
		dumpLabelVector();

		ifs.close();
	}

	void readFromFile()
	{
		ifstream ifs(inputFileName.c_str(),ifstream::in);
		cout<<"\nReading from "<<inputFileName<<endl;

		pair<double,double> gamakTimeInterval;
		double duration;
		while(!ifs.eof())
		{
			ifs>>gamakTimeInterval.first >>gamakTimeInterval.second>>duration;
		//	cout<<gamakTimeInterval.first <<"\t"<<gamakTimeInterval.second<<endl;
			
			//if( (gamakTimeInterval.second - gamakTimeInterval.first) < insigGamakTimeGap )
			//	continue;

			//handleRecords(gamakTimeInterval);
			assignGamakTime(gamakTimeInterval);
		} 

		//cout<<"\nOut of the loop\n";
		labelGamakOrNot();

		//dumping the label vector 
		dumpLabelVector();

		ifs.close();
	}

	void getList()
	{
		//cout<<"getList run\n\n";
		string outputFileName;

			if(inputFileName.find("List") != string::npos)
			{
				 outputFileName.append( inputFileName.substr( 0,inputFileName.find("List")));
		 		 outputFileName.append("ModfObjList.txt"); 
			}
			else
				cout<<"Wrong File name \n";

		ofstream ofs;
		ofs.open(outputFileName.c_str(),ofstream::out);
	

		int flag=0;
		int startTm=0,endTm=0; 

		for(int i = 0; i<label.size();i++)
			{
				if(flag == 0 && label[i].second == 1 )
				{
					startTm = label[i].first;
					flag=1;
				}
				else if(flag==1 && label[i].second==0)
				{
					endTm = label[i].first;
					flag=0;
					ofs<< startTm/60 << ":"<<startTm%60<<"\t\t"<<endTm/60<<":"<<endTm%60<<endl;
				}

			}
	
		ofs.close();
	}


};

void compareWithLabel(vector< pair<int,int> > myLabel , vector< pair<int,int> > result)
{
	int truePositive=0,falsePositive=0,trueNegative=0,falseNegative=0;

	for(int i = 0 ; i < myLabel.size();	i++)
	{
		if(myLabel[i].second == -1)
			truePositive++;
		else if(myLabel[i].second == 1 && result[i].second == 1)
			truePositive++;
		else if(myLabel[i].second == 0 && result[i].second == 1)
			falsePositive++;
		else if(myLabel[i].second == 1 && result[i].second == 0)
			falseNegative++;
		else
			trueNegative++;
	}
	cout<<"\n\n truePositive = "<<truePositive<<"\n\n falsePositive = "<<falsePositive<<"\n\n trueNegative = "<<trueNegative<<"\n\n falseNegative = "<<falseNegative<<endl;
	
	ofstream ofs("result",ios::app);
	ofs<<truePositive<<"\n"<<falsePositive<<"\n"<<trueNegative<<"\n"<<falseNegative<<endl;
	ofs.close();
}

int main(int argc, char const *argv[])
{

	insigGamakTimeGap = atof(argv[2]);

	cout<<"interval is "<<insigGamakTimeGap<<endl;
	
	gmkListParse labelObj(argv[3]);
	labelObj.readFromLabelFile();
	//labelObj.getList();

	gmkListParse obj(argv[1]);
	obj.readFromFile();
	obj.getList();  
	
	ofstream ofs("result",ios::app);
	ofs<<" For   :  "<<argv[1]<<"results in order TP FP TN FN "<<"\n";
	ofs.close();
	compareWithLabel(labelObj.label , obj.label);

	return 0;
}